@use "../mixins/border-radius";
@use "../vendor/rfs";

//
// Base styles
//

.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap; // For form validation feedback
  align-items: stretch;
  width: 100%;

  > .form-control,
  > .form-select,
  > .form-file {
    position: relative; // For focus state's z-index
    flex: 1 1 auto;
    width: 1%;
    min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
  }

  // Bring the "active" form control to the top of surrounding elements
  > .form-control:focus,
  > .form-select:focus,
  > .form-file .form-file-input:focus ~ .form-file-label {
    z-index: 3;
  }

  // Bring the custom file input above the label
  > .form-file {
    > .form-file-input:focus {
      z-index: 4;
    }

    &:not(:last-child) > .form-file-label {
      @include border-radius.border-right-radius(0);
    }

    &:not(:first-child) > .form-file-label {
      @include border-radius.border-left-radius(0);
    }
  }

  // Ensure buttons are always above inputs for more visually pleasing borders.
  // This isn't needed for `.input-group-text` since it shares the same border-color
  // as our inputs.
  .btn {
    position: relative;
    z-index: 2;

    &:focus {
      z-index: 3;
    }
  }
}


// Textual addons
//
// Serves as a catch-all element for any text or radio/checkbox input you wish
// to prepend or append to an input.

.input-group-text {
  display: flex;
  align-items: center;
  padding: variables.$input-padding-y variables.$input-padding-x;
  @include rfs.font-size(variables.$input-font-size); // Match inputs
  font-weight: variables.$font-weight-normal;
  line-height: variables.$input-line-height;
  color: variables.$input-group-addon-color;
  text-align: center;
  white-space: nowrap;
  background-color: variables.$input-group-addon-bg;
  border: variables.$input-border-width solid variables.$input-group-addon-border-color;
  @include border-radius.border-radius(variables.$input-border-radius);
}


// Sizing
//
// Remix the default form control sizing classes into new ones for easier
// manipulation.

.input-group-lg > .form-control {
  min-height: variables.$input-height-lg;
}

.input-group-lg > .form-select {
  height: variables.$input-height-lg;
}

.input-group-lg > .form-control,
.input-group-lg > .form-select,
.input-group-lg > .input-group-text,
.input-group-lg > .btn {
  padding: variables.$input-padding-y-lg variables.$input-padding-x-lg;
  @include rfs.font-size(variables.$input-font-size-lg);
  @include border-radius.border-radius(variables.$input-border-radius-lg);
}

.input-group-sm > .form-control {
  min-height: variables.$input-height-sm;
}

.input-group-sm > .form-select {
  height: variables.$input-height-sm;
}

.input-group-sm > .form-control,
.input-group-sm > .form-select,
.input-group-sm > .input-group-text,
.input-group-sm > .btn {
  padding: variables.$input-padding-y-sm variables.$input-padding-x-sm;
  @include rfs.font-size(variables.$input-font-size-sm);
  @include border-radius.border-radius(variables.$input-border-radius-sm);
}

.input-group-lg > .form-select,
.input-group-sm > .form-select {
  padding-right: variables.$form-select-padding-x + variables.$form-select-indicator-padding;
}


// Rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.input-group >` part, but without it, we cannot override the sizing.

// stylelint-disable-next-line no-duplicate-selectors
.input-group {
  > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu),
  > .dropdown-toggle:nth-last-child(n + 3) {
    @include border-radius.border-right-radius(0);
  }

  > :not(:first-child):not(.dropdown-menu) {
    margin-left: -(variables.$input-border-width);
    @include border-radius.border-left-radius(0);
  }
}
