@use "../mixins/border-radius";
@use "../mixins/box-shadow";
@use "../mixins/transition";
@use "../vendor/rfs";

//
// Textual form controls
//

.form-control {
  display: block;
  width: 100%;
  min-height: variables.$input-height;
  padding: variables.$input-padding-y variables.$input-padding-x;
  font-family: variables.$input-font-family;
  @include rfs.font-size(variables.$input-font-size);
  font-weight: variables.$input-font-weight;
  line-height: variables.$input-line-height;
  color: variables.$input-color;
  background-color: variables.$input-bg;
  background-clip: padding-box;
  border: variables.$input-border-width solid variables.$input-border-color;
  appearance: none; // Fix appearance for date inputs in Safari

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @include border-radius.border-radius(variables.$input-border-radius, 0);

  @include box-shadow.box-shadow(variables.$input-box-shadow);
  @include transition.transition(variables.$input-transition);

  // Customize the `:focus` state to imitate native WebKit styles.
  &:focus {
    color: variables.$input-focus-color;
    background-color: variables.$input-focus-bg;
    border-color: variables.$input-focus-border-color;
    outline: 0;
    @if variables.$enable-shadows {
      @include box-shadow.box-shadow(variables.$input-box-shadow, variables.$input-focus-box-shadow);
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: variables.$input-focus-box-shadow;
    }
  }

  // Placeholder
  &::placeholder {
    color: variables.$input-placeholder-color;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: variables.$input-disabled-bg;
    border-color: variables.$input-disabled-border-color;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }
}

// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.form-control-plaintext {
  display: block;
  width: 100%;
  padding: variables.$input-padding-y 0;
  margin-bottom: 0; // match inputs if this class comes on inputs with default margins
  line-height: variables.$input-line-height;
  color: variables.$input-plaintext-color;
  background-color: transparent;
  border: solid transparent;
  border-width: variables.$input-border-width 0;

  &.form-control-sm,
  &.form-control-lg {
    padding-right: 0;
    padding-left: 0;
  }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.

.form-control-sm {
  min-height: variables.$input-height-sm;
  padding: variables.$input-padding-y-sm variables.$input-padding-x-sm;
  @include rfs.font-size(variables.$input-font-size-sm);
  @include border-radius.border-radius(variables.$input-border-radius-sm);
}

.form-control-lg {
  min-height: variables.$input-height-lg;
  padding: variables.$input-padding-y-lg variables.$input-padding-x-lg;
  @include rfs.font-size(variables.$input-font-size-lg);
  @include border-radius.border-radius(variables.$input-border-radius-lg);
}

.form-control-color {
  max-width: 3rem;
  padding: variables.$input-padding-y;
}

.form-control-color::-moz-color-swatch {
  @include border-radius.border-radius(variables.$input-border-radius);
}

.form-control-color::-webkit-color-swatch {
  @include border-radius.border-radius(variables.$input-border-radius);
}
