@use "../scss/mixins/index" as mix;
@use "../scss/variables-default" as var;

//
// Base styles
//

.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap; // For form validation feedback
  align-items: stretch;
  width: 100%;

  > .form-control,
  > .form-select,
  > .form-file {
    position: relative; // For focus state's z-index
    flex: 1 1 auto;
    width: 1%;
    min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
  }

  // Bring the "active" form control to the top of surrounding elements
  > .form-control:focus,
  > .form-select:focus,
  > .form-file > .input:focus ~ .form-file > .label {
    z-index: 3;
  }

  // Bring the custom file input above the label
  > .form-file {
    > .input:focus {
      z-index: 4;
    }

    &:not(:last-child) > .label {
      @include mix.border-right-radius(0);
    }

    &:not(:first-child) > .label {
      @include mix.border-left-radius(0);
    }
  }

  // Ensure buttons are always above inputs for more visually pleasing borders.
  // This isn't needed for `.input-group-text` since it shares the same border-color
  // as our inputs.
  .c-btn {
    position: relative;
    z-index: 2;

    &:focus {
      z-index: 3;
    }
  }

  // Textual addons
  //
  // Serves as a catch-all element for any text or radio/checkbox input you wish
  // to prepend or append to an input.

  > .text {
    display: flex;
    align-items: center;
    padding: var.$input-padding-y var.$input-padding-x;
    @include mix.font-size(var.$input-font-size); // Match inputs
    font-weight: var.$font-weight-normal;
    line-height: var.$input-line-height;
    color: var.$input-group-addon-color;
    text-align: center;
    white-space: nowrap;
    background-color: var.$input-group-addon-bg;
    border: var.$input-border-width solid var.$input-group-addon-border-color;
    @include mix.border-radius(var.$input-border-radius);
  }

  // Sizing
  //
  // Remix the default form control sizing classes into new ones for easier
  // manipulation.

  &.-lg > .form-control {
    min-height: var.$input-height-lg;
  }

  &.-lg > .form-select {
    height: var.$input-height-lg;
  }

  &.-lg > .form-control,
  &.-lg > .form-select,
  &.-lg > .text,
  &.-lg > .btn {
    padding: var.$input-padding-y-lg var.$input-padding-x-lg;
    @include mix.font-size(var.$input-font-size-lg);
    @include mix.border-radius(var.$input-border-radius-lg);
  }

  &.-sm > .form-control {
    min-height: var.$input-height-sm;
  }

  &.-sm > .form-select {
    height: var.$input-height-sm;
  }

  &.-sm > .form-control,
  &.-sm > .form-select,
  &.-sm > .text,
  &.-sm > .c-btn {
    padding: var.$input-padding-y-sm var.$input-padding-x-sm;
    @include mix.font-size(var.$input-font-size-sm);
    @include mix.border-radius(var.$input-border-radius-sm);
  }

  &.-lg > .form-select,
  &.-sm > .form-select {
    padding-right: var.$form-select-padding-x + var.$form-select-indicator-padding;
  }
}

// Rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.input-group >` part, but without it, we cannot override the sizing.

// stylelint-disable-next-line no-duplicate-selectors
.input-group {
  > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu),
  > .dropdown-toggle:nth-last-child(n + 3) {
    @include mix.border-right-radius(0);
  }

  > :not(:first-child):not(.dropdown-menu) {
    margin-left: -(var.$input-border-width);
    @include mix.border-left-radius(0);
  }
}
