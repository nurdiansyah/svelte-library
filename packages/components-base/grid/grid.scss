// stylelint-disable rscss/class-format
@use "sass:math";
@use "../scss/functions" as *;
@use "../scss/theme";
@use "../scss/mixins/index" as mix;

@mixin generate-grid($breakpoint) {
  @each $size in get-value(theme.$grids, sizes) {
    &.-#{$breakpoint}-#{$size} {
      @if ($size == true) {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      } @else if($size == "auto") {
        flex-basis: auto;
        flex-grow: 0;
        max-width: none;
      } @else {
        $width: (math.round(($size/12) * 100000000) / 1000000) * 1%;
        flex-basis: $width;
        flex-grow: 0;
        max-width: $width;
      }
    }
  }
}

@mixin generate-gutter($breakpoint) {
  @each $spacing in get-value(theme.$grids, spacing) {
    $_spacing: get-value(theme.$spacers, $spacing);
    @if ($_spacing) {
      $_offset: #{$_spacing/2};
      &.-spacing-#{$breakpoint}-#{$spacing} {
        width: calc(100% + #{$_spacing});
        margin: -$_offset;
        & > .item {
          padding: $_offset;
        }
      }
    }
  }
}

.dbx-grid {
  &.-container {
    box-sizing: border-box;
    display: flex;
    flex-wrap: wrap;
    width: 100%;
  }

  & > .item {
    box-sizing: border-box;
    margin: 0;
  }

  &.-zero-min-width {
    min-width: 0;
  }

  /* Styles applied to the root element if `direction="column"`. */
  &.-direction-xs-column {
    flex-direction: column;
  }
  /* Styles applied to the root element if `direction="column-reverse"`. */
  &.-direction-xs-column-reverse {
    flex-direction: column-reverse;
  }
  /* Styles applied to the root element if `direction="row-reverse"`. */
  &.-direction-xs-row-reverse {
    flex-direction: row-reverse;
  }
  /* Styles applied to the root element if `wrap="nowrap"`. */
  &.-wrap-xs-nowrap {
    flex-wrap: nowrap;
  }
  /* Styles applied to the root element if `wrap="reverse"`. */
  &.-wrap-xs-wrap-reverse {
    flex-wrap: wrap-reverse;
  }
  /* Styles applied to the root element if `alignItems="center"`. */
  &.-align-items-xs-center {
    align-items: center;
  }
  /* Styles applied to the root element if `alignItems="flex-start"`. */
  &.-align-items-xs-flex-start {
    align-items: flex-start;
  }
  /* Styles applied to the root element if `alignItems="flex-end"`. */
  &.-align-items-xs-flex-end {
    align-items: flex-end;
  }
  /* Styles applied to the root element if `alignItems="baseline"`. */
  &.-align-items-xs-baseline {
    align-items: baseline;
  }
  /* Styles applied to the root element if `alignContent="center"`. */
  &.-align-content-xs-center {
    align-content: center;
  }
  /* Styles applied to the root element if `alignContent="flex-start"`. */
  &.-align-content-xs-flex-start {
    align-content: flex-start;
  }
  /* Styles applied to the root element if `alignContent="flex-end"`. */
  &.-align-content-xs-flex-end {
    align-content: flex-end;
  }
  /* Styles applied to the root element if `alignContent="space-between"`. */
  &.-align-content-xs-space-between {
    align-content: space-between;
  }
  /* Styles applied to the root element if `alignContent="space-around"`. */
  &.-align-content-xs-space-around {
    align-content: space-around;
  }
  /* Styles applied to the root element if `justify="center"`. */
  &.-justify-xs-center {
    justify-content: center;
  }
  /* Styles applied to the root element if `justify="flex-end"`. */
  &.-justify-xs-flex-end {
    justify-content: flex-end;
  }
  /* Styles applied to the root element if `justify="space-between"`. */
  &.-justify-xs-space-between {
    justify-content: space-between;
  }
  /* Styles applied to the root element if `justify="space-around"`. */
  &.-justify-xs-space-around {
    justify-content: space-around;
  }
  /* Styles applied to the root element if `justify="space-evenly"`. */
  &.-justify-xs-space-evenly {
    justify-content: space-evenly;
  }

  @each $key, $breakpoint in theme.$breakpoints {
    @include mix.media-breakpoint-up($key) {
      @include generate-grid($key);
      @include generate-gutter($key);
    }
  }
}
