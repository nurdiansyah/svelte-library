/* stylelint-disable rscss/class-format */
@use "sass:list";
@use "../vendor/rfs";
@use "./border-radius";
@use "../variables-default" as var;
@use "../colors";
@use "../functions";

// This mixin uses an `if()` technique to be compatible with Dart Sass
// See https://github.com/sass/sass/issues/1873#issuecomment-152293725 for more details
@mixin form-validation-state-selector($state) {
  @if ($state == "valid" or $state == "invalid") {
    &.-was-validated #{if(&, "&", "")}:#{$state},
    #{if(&, "&", "")}.-is-#{$state} {
      @content;
    }
  } @else {
    #{if(&, "&", "")}.-is-#{$state} {
      @content;
    }
  }
}

@mixin form-validation-state($state, $color, $icon) {
  .-#{$state}-feedback {
    display: none;
    width: 100%;
    margin-top: var.$form-feedback-margin-top;
    @include rfs.font-size(var.$form-feedback-font-size);
    font-style: var.$form-feedback-font-style;
    color: $color;
  }

  .-#{$state}-tooltip {
    position: absolute;
    top: 100%;
    z-index: 5;
    display: none;
    max-width: 100%; // Contain to parent when possible
    padding: var.$form-feedback-tooltip-padding-y var.$form-feedback-tooltip-padding-x;
    margin-top: 0.1rem;
    @include rfs.font-size(var.$form-feedback-tooltip-font-size);
    line-height: var.$form-feedback-tooltip-line-height;
    color: colors.color-contrast($color);
    background-color: rgba($color, var.$form-feedback-tooltip-opacity);
    @include border-radius.border-radius(var.$form-feedback-tooltip-border-radius);
  }

  @include form-validation-state-selector($state) {
    ~ .#{$state}-feedback,
    ~ .#{$state}-tooltip {
      display: block;
    }
  }

  .form-control {
    @include form-validation-state-selector($state) {
      border-color: $color;

      @if var.$enable-validation-icons {
        padding-right: var.$input-height-inner;
        background-image: functions.escape-svg($icon);
        background-repeat: no-repeat;
        background-position: right var.$input-height-inner-quarter center;
        background-size: var.$input-height-inner-half var.$input-height-inner-half;
      }

      &:focus {
        border-color: $color;
        box-shadow: 0 0 0 var.$input-focus-width rgba($color, var.$input-btn-focus-color-opacity);
      }
    }
  }

  // stylelint-disable-next-line selector-no-qualifying-type
  textarea.form-control {
    @include form-validation-state-selector($state) {
      @if var.$enable-validation-icons {
        padding-right: var.$input-height-inner;
        background-position: top var.$input-height-inner-quarter right var.$input-height-inner-quarter;
      }
    }
  }

  .form-select {
    @include form-validation-state-selector($state) {
      border-color: $color;

      @if var.$enable-validation-icons {
        padding-right: var.$form-select-feedback-icon-padding-right;
        background-image: functions.escape-svg(var.$form-select-indicator), functions.escape-svg($icon);
        background-position: var.$form-select-bg-position, var.$form-select-feedback-icon-position;
        background-size: var.$form-select-bg-size, var.$form-select-feedback-icon-size;
      }

      &:focus {
        border-color: $color;
        box-shadow: 0 0 0 var.$input-focus-width rgba($color, 0.25);
      }
    }
  }

  .form-check-input {
    @include form-validation-state-selector($state) {
      border-color: $color;

      &:checked {
        background-color: $color;
      }

      &:focus {
        box-shadow: 0 0 0 var.$input-focus-width rgba($color, 0.25);
      }

      ~ .form-check-label {
        color: $color;
      }
    }
  }
  .form-check-inline .form-check-input {
    ~ .#{$state}-feedback {
      margin-left: 0.5em;
    }
  }

  // custom file
  .form-file-input {
    @include form-validation-state-selector($state) {
      ~ .form-file-label {
        border-color: $color;
      }

      &:focus {
        ~ .form-file-label {
          border-color: $color;
          box-shadow: 0 0 0 var.$input-focus-width rgba($color, 0.25);
        }
      }
    }
  }
}
