@use "sass:math";
@use "sass:map";
@use "./breakpoints";
@use "../variables-default" as var;

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-row($gutter: var.$grid-gutter-width) {
  --gutter-x: #{$gutter};
  --gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(var(--gutter-y) * -1); // stylelint-disable-line function-blacklist
  margin-right: calc(var(--gutter-x) / -2); // stylelint-disable-line function-blacklist
  margin-left: calc(var(--gutter-x) / -2); // stylelint-disable-line function-blacklist
}

@mixin make-col-ready($gutter: var.$grid-gutter-width) {
  // Add box sizing if only the grid is loaded box-sizing: if(meta.variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(var(--gutter-x) / 2); // stylelint-disable-line function-blacklist
  padding-left: calc(var(--gutter-x) / 2); // stylelint-disable-line function-blacklist
  margin-top: var(--gutter-y);
}

@mixin make-col($size, $columns: var.$grid-columns) {
  flex: 0 0 auto;
  width: math.percentage($size / $columns);
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: var.$grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, math.percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
  & > * {
    flex: 0 0 auto;
    width: 100% / $count;
  }
}
