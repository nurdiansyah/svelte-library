@use "styles/colors";
@use "styles/theme";
@use "styles/functions" as *;
@use "styles/mixins/index" as mix;

$_typography: theme.$typography;

.button-base.-button {
  min-width: 64px;
  padding: 6px 16px;
  font-size: get-value($_typography, (button, size));
  font-weight: get-value($_typography, (button, weight));
  line-height: get-value($_typography, (button, line-height));
  letter-spacing: get-value($_typography, (button, letter-spacing));
  border-radius: get-value(theme.$shape, (border-radius));
  transition: theme.get-transition((background-color, box-shadow, border), short);

  > .label {
    display: inherit;
    align-items: inherit;
    justify-content: inherit;
    width: 100%;
  }

  &:hover {
    text-decoration: none;

    @media (hover: none) {
      background-color: transparent;
    }

    &.-disabled {
      background-color: transparent;
    }
  }

  &.-disable-elevation {
    &,
    &:hover,
    &.-focus-visible,
    &.-disabled,
    &.-active {
      box-shadow: none;
    }
  }

  &.-color-inherit {
    color: inherit;
    border-color: inherit;
  }

  &.-text {
    padding: 6px 8px;

    &.-size-small {
      padding: 4px 5px;
      font-size: px-to-rem(13);
    }

    &.-size-large {
      padding: 8px 11px;
      font-size: px-to-rem(15);
    }
  }

  &.-outlined {
    padding: 5px 15px;
    border-style: solid;
    border-width: 1px;

    &.-size-small {
      padding: 3px 9px;
      font-size: px-to-rem(13);
    }

    &.-size-large {
      padding: 7px 21px;
      font-size: px-to-rem(15);
    }
  }

  &.-contained {
    &.-full-width {
      width: 100%;
    }
  }

  .start-icon {
    display: inherit;
    margin-right: 8px;
    margin-left: -4px;
  }

  .end-icon {
    display: inherit;
    margin-right: -4px;
    margin-left: 8px;
  }

  .dbx-icon {
    font-size: px-to-rem(20);

    &.-size-small {
      font-size: px-to-rem(18);

      .end-icon {
        margin-right: -2px;
      }

      .start-icon {
        margin-left: -2px;
      }
    }

    &.-size-large {
      font-size: px-to-rem(22);
    }
  }

  @include mix.build-theme() using($theme, $key) {
    $_hover-opacity: get-value($theme, (action, hover-opacity));
    $_disabled-background: get-value($theme, (action, disabled-background));
    $_disabled: get-value($theme, (action, disabled));
    $_text-color: get-value($theme, (text, primary));
    $_action-hover: get-value($theme, (action, hover));
    color: $_text-color;
    &:hover {
      background-color: $_action-hover;
    }

    &.-outlined {
      border-color: get-value($theme, (outlined, border-color));

      &.-disabled {
        border-color: $_disabled-background;
      }
    }

    &.-contained {
      color: colors.color-contrast(colors.$gray-300);
      background-color: colors.$gray-300;
      box-shadow: nth(theme.$shadow, 3);

      &:hover {
        background-color: colors.$gray-a-100;
        box-shadow: nth(theme.$shadow, 5);

        // reset on touch devices, it doesn't add specificity
        @media (hover: none) {
          background-color: colors.$gray-300;
          box-shadow: nth(theme.$shadow, 3);
        }

        &.-disabled {
          background-color: $_disabled-background;
        }
      }

      &.-focus-visible {
        box-shadow: nth(theme.$shadow, 7);
      }

      &.-active {
        box-shadow: nth(theme.$shadow, 9);
      }

      &.-disabled {
        color: $_disabled;
        background-color: $_disabled-background;
        box-shadow: nth(theme.$shadow, 1);
      }
    }

    &.-disabled {
      color: get-value($theme, (action, disabled));
    }

    @include mix.build-colors() using($color) {
      $_main-color: get-value($color, main);
      $_dark-color: get-value($color, dark);

      &.-outlined {
        color: $_main-color;

        border-color: rgba($_main-color, 0.5);

        &:hover {
          background-color: rgba($_main-color, 0.04);
          border-color: $_main-color;

          @media (hover: none) {
            background-color: transparent;
          }
        }
      }

      &.-contained {
        color: colors.color-contrast($_main-color);
        background-color: $_main-color;

        &:hover {
          background-color: $_dark-color;

          @media (hover: none) {
            background-color: $_dark-color;
          }
        }
      }
    }
  }
}
