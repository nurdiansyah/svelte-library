@use "styles/functions" as *;
@use "styles/theme";
@use "styles/mixins" as mix;

.button-base.-icon {
  flex: 0 0 auto;
  padding: 12px;
  font-size: px-to-rem(24);
  text-align: center;
  border-radius: 50%;
  transition: theme.get-transition(background-color, shortest);

  > .label {
    display: flex;
    align-items: inherit;
    justify-content: inherit;
    width: 100%;

    > svg {
      display: inline-block;
      flex-shrink: 0;
      width: 1em;
      height: 1em;
      font-size: 1.5rem;
      user-select: none;
      fill: currentColor;
      transition: theme.get-transition(shorter, ease-in-out);
    }
  }

  > .edge-start {
    margin-left: -12px;
  }

  > .edge-end {
    margin-right: -12px;
  }

  &.-size-small {
    padding: 3px;
    font-size: px-to-rem(18);

    > .edge-start {
      margin-left: 3px;
    }

    > .edge-end {
      margin-right: -3px;
    }
  }

  @include mix.build-theme() using($theme, $key) {
    $_text-color: get-value($theme, (text, primary));
    $_active: get-value($theme, (action, active));
    $_hover: get-value($theme, (action, hover));
    $_disabled: get-value($theme, (action, disabled));

    color: $_text-color;
    &:hover {
      background-color: $_hover;
      @media (hover: none) {
        background-color: transparent;
      }
    }

    &.-disabled {
      color: $_disabled;
      background-color: transparent;
    }

    &.-color-inherit {
      color: inherit;
    }

    @include mix.build-colors() using($color) {
      $_color-main: get-value($color, main);

      color: $_color-main;
      &:hover {
        background-color: fade-in($_color-main, 0.04);
        @media (hover: none) {
          background-color: transparent;
        }
      }
    }
  }
}
